<?xml version="1.0"?>
<job>
<!--
    This file is part of The Registry Files Tools available
    at http://code.google.com/p/registry-files-tools/

    Copyright (C)  2009  Olivier MenguÃ©

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>
-->
<object id="FSO" progid="Scripting.FileSystemObject" />
<object id="stream" progid="ADODB.Stream"/>
<object id="rs" progid="ADODB.Recordset"/>
<reference object="Scripting.FileSystemObject" />
<reference object="ADODB.Stream"/>
<script language="JScript"><![CDATA[

var unicodeToBytes = {
    '\u20AC': 0x80,
    '\u201A': 0x82,
    '\u0192': 0x83,
    '\u201E': 0x84,
    '\u2026': 0x85,
    '\u2020': 0x86,
    '\u2021': 0x87,
    '\u02C6': 0x88,
    '\u2030': 0x89,
    '\u0160': 0x8A,
    '\u2039': 0x8B,
    '\u0152': 0x8C,
    '\u017D': 0x8E,
    '\u2018': 0x91,
    '\u2019': 0x92,
    '\u201C': 0x93,
    '\u201D': 0x94,
    '\u2022': 0x95,
    '\u2013': 0x96,
    '\u2014': 0x97,
    '\u02DC': 0x98,
    '\u2122': 0x99,
    '\u0161': 0x9A,
    '\u203A': 0x9B,
    '\u0153': 0x9C,
    '\u017E': 0x9E,
    '\u0178': 0x9F
};
var bytesToUnicode = {};


function readFileBinary(filename)
{
    stream.Type = adTypeBinary;
    stream.Open();
    stream.LoadFromFile(filename);
    var bytes = stream.Read(adReadAll);
    stream.Close();
    rs.Fields.Append("bin", adLongVarChar, 1);
    rs.Open();
    rs.AddNew();
    rs.Fields("bin").AppendChunk(bytes);
    rs.Update();
    content = new String(rs.Fields("bin"));
    rs.Close();
    return content;
}

function writeBinaryFile(filename, content)
{
/*
    rs.Fields.Append("bin", adLongVarBinary, content.length);
    rs.Open();
    rs.AddNew();
    rs.Fields("bin").AppendChunk(content);
    rs.Update();
    content = rs.Fields("bin").GetChunk(content.length/2);
    rs.Close();
*/
    WScript.Echo(typeof content);
    for(f in content) {
        WScript.Echo(f);
    }
    //WScript.StdOut.Write(content.toString());
    stream.Type = adTypeBinary;
    stream.Open();
    stream.Write(content);
    stream.SaveToFile(filename, adSaveCreateOverwrite);
    stream.Close();
}

function stringToCharCodes(s)
{
    var i, l = s.length, r = new Array(l);
    for(i=0; i<l; i++) {
        r[i] = s.charCodeAt(i);
    }
    return r;
}

function charCodesToString(a)
{
    var i, l = a.length, r = new Array(l);
    for(i=0; i<l; i++) {
        r[i] = String.fromCharCode(a[i]);
    }
    return r.join('');
}

function charCodesToBytes(a)
{
    var i, l = a.length, m = l-(l&1), r = [];
    for(i=0; i<m; i+=2) {
        r.push(String.fromCharCode((a[i+1]<<8)+a[i]));
    }
    if (m<l) {
        r.push(String.fromCharCode(a[m]));
        //WScript.Echo(i+" "+m+" "+l+" > "+a[m]+" "+r[r.length-1]);
    }
    r = r.join('');
    rs.Fields.Append("bin", adLongVarBinary, l);
    rs.Open();
    rs.AddNew();
    rs.Fields("bin").AppendChunk(r);
    rs.Update();
    r = rs.Fields("bin").GetChunk(l);
    rs.Close();
    return r;
}

var buf = [];
for(var i=0; i<256; i++) {
    buf[i] = i;
}
buf[256] = 65;

var buf2 = charCodesToString(buf);
WScript.StdOut.Write(buf2);
writeBinaryFile("test.bin", charCodesToBytes(buf));

]]></script>
</job>
